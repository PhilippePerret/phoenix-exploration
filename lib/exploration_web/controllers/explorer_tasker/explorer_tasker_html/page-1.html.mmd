<%= raw @titre %>
<%= raw link_other_pages(@page_index, @projet) %>

### Affichage de la page « Salut tout le monde ! » en LiveView

1. Créer l’application « **Try1** » avec `mix phx.new try1`

Je veux une route « /hello » qui affiche « Salut tout le monde » en LiveView.

* j’ajoute `import Phoenix.LiveView.Router` en haut de path(try1_web/router.ex)

* j’ajoute la route dans le même fichier :

  ~~~elixir
  scope "/", Try1Web do
  	pipe_through :browser
  	
  	live "/hello", Hello # module Try1Web.Hello
  end
  ~~~

Je dois faire la LiveView dans un dossier à créer `try1_web/live/`, c’est un fichier `hello.ex` :

~~~elixir
# Création du module utilisé par exemple dans le router
defmodule Try1Web.Hello do

	# Pour utiliser LiveView
	use Phoenix.LiveView
	
	# Pour rendre la vue
	def render(assigns) do
		~H"""
		<div> Hello tout le monde !</div>
		"""
	end
	
end
~~~

> Noter que `use Phoenix.LiveView` importe automatiquement `Phoenix.Component`.

Je fais tout le bins pour lancer le serveur, je me rends à `http://localhost:4000/hello` et je vois le message s’afficher.

Maintenant, je veux un bouton qui ajoute comment je m’appelle. La méthode `render` va ressembler à :

~~~elixir

def render(assigns) do
		~H"""
		<div> Hello tout le monde !</div>
		<div>
			<button phx-click="ecris_mon_nom">Écris-moi</button>
		</div>
		"""
end
~~~

Si on clique sur le bouton dans la page, ça génère une erreur :

~~~bash
[debug] HANDLE EVENT "ecris_mon_nom" in Try1Web.Hello
  Parameters: %{"value" => ""}
[error] GenServer #PID<0.889.0> terminating
** (UndefinedFunctionError) function Try1Web.Hello.handle_event/3 is
    undefined or private
~~~

On ajoute le capteur d’évènement dans `hello.ex`

~~~elixir
# Fonction qui capte l'évènement click
def handle_event("ecris_mon_nom", _params, socket) do
	{:noreply, socket}
end
~~~

Il n’y a plus d’erreurs, mais la méthode ne fait rien.

Maintenant je vais lui dire d’ajouter mon prénom après lui avoir donné une valeur par défaut.

La page commence par passer par `mount`, donc :

~~~elixir
def mount(_params, _session, socket) do
	{:ok, assign(socket, :prenom, "L'homme sans visage")}
end
~~~

J’utilise ce prénom dans la vue rendue :

~~~elixir
def render(assigns) do
		~H"""
		<div> Hello tout le monde !</div>
		<div>Je m'appelle <%= @prenom %></div>
		<div>
			<button phx-click="ecris_mon_nom">Écris-moi</button>
		</div>
		"""
end
~~~

Pour l’instant, la page va afficher :

Hello tout le monde !
Je m’appelle L’homme sans visage.

Je vais modifier le prénom dans l’évènement `ecris_mon_nom` :

~~~elixir
def handle_event("ecris_mon_nom", _params, socket) do
	{:noreply, assign(socket, :prenom, "Philippe")}
end
~~~

Cette fois quand je clique sur le bouton, la page affiche :

Hello tout le monde !
Je m’appelle Philippe.

Je vais maintenant incrémenter une valeur à l’aide d’une fonction anonyme :

Ma vue doit contenir :

~~~elixir
def render(assigns) do
		~H"""
		<div> Hello tout le monde !</div>
		<div>
			Je m'appelle <%= @prenom %> et je l'ai déjà
			dit <%= iterations %> fois.
		</div>
		<div>
			<button phx-click="ecris_mon_nom">Écris-moi</button>
		</div>
		"""
end

~~~

On lui donne une valeur au départ :

~~~elixir
def mount(_params, _session, socket) do
	{:ok, assign(socket, %{
			prenom: "L'homme sans visage",
			iterations: 0
		})}
end
~~~

La page affiche :

Hello tout le monde !
Je m’appelle L’homme sans visage et je l’ai dit 0 fois.

On l’incrémente lorsque l’on clique sur le bouton. Ici, on va utiliser la méthode `update/3` qui actualise une valeur d’une Map à l’aide d’une fonction, ici une fonction anonyme (`&(...)`) :

~~~elixir
def handle_event("ecris_mon_nom", _params, socket) do
	socket =
	socket
	|> update(:iterations, &(&1 + 1))
	|> assign(:prenom, "Philippe")
	{:noreply, socket}
end
~~~

Cette fois, si je clique sur le bouton, j’obtiendrai :

Hello tout le monde !
Je m’appelle Philippe et je l’ai dit 1 fois.

Si je clique à nouveau : 

Hello tout le monde !
Je m’appelle Philippe et je l’ai dit 2 fois.

etc.

On va compliquer en envoyant le prénom par l’URL avec quelque chose comme :

~~~bash
http://localhost:4000/hello/Élodie
~~~

On prend en compte cette route :

~~~elixir
# in router.ex

scope "/hello/:someone", Try1Web do
	get "/", Hello
end
~~~

Maintenant je peux recevoir `:someone` en paramètre de `mount` :

~~~elixir
def mount(%{"someone" => someone}, _session, socket) do
  {:ok, assign(socket, %{prenom: someone, valeur: 0})}
end


~~~

Noter que pour le moment, si je n’envoie aucun prénom (`http://localhost:4000/hello`) ça génère une erreur `no function clause matching in Try1Web.Hello.mount/3`.

#### Utilisation d’une vue

Plutôt que d’utiliser la fonction `render` dans `hello.ex`, je peux utiliser une vue `html.heex`. 

Le plus simple pour commencer est de créer un fichier au même niveau que `hello.ex` et de l’appeler `hello.html.heex`. J’y colle le code de la fonction `render` que je supprime :

~~~heex
<%# in hello.html.heex %>
<h1>Salutations</h1>
<div>Salut tout le monde !</div>
<div>Je m'appelle <%= @prenom %> et je l'ai dit <%= @valeur %> fois</div>
<div>
  <button phx-click="ecris_mon_nom">Écris-moi</button>
</div>
~~~

> Bien penser à supprimer la méthode `render`

Noter que j’ai ajouter un `<h1>Salutations</h1>` pour être sûr que ce soit bien cette vue qui est appelée et pas une vue en cache…

L’url path(http://localhost:4000/hello/Élodie) produit bien :

Salutations
Salut tout le monde !
Je m’appelle Élodie et je l’ai dit 0 fois
Écris-moi

Si je clique sur « Écris-moi », j’obtiens :

Salutations
Salut tout le monde !
Je m’appelle Philippe et je l’ai dit 1 fois
Écris-moi

On peut tout à fait mettre le fichier path(hello.ex) et path(hello.html.heex) dans un sous-dossier de path(live), ça fonctionne aussi. Mais je n’arrive pas encore à placer path(hello.html.heex) ailleurs, dans un dossier template, même en imitant les contrôleurs normaux.

Donc je les ai déplacés vers là, pour faire une autre vue où je vais travailler avec un formulaire pour une opération immédiate et pas persistante.

~~~bash
try1 
		|- lib
				|- try1_web
						|- live
								|- hello
										|- hello.ex
										|- hello.html.heex
								|- monform
										|- monform.ex
										|- monform.html.heex
~~~

## Documentation

Avant de poursuivre, une petite note sur la documentation. En général il est très facile de trouver de la documentation, simplement en tapant « Phoenix lt;la chose à trouver> », « Elixir &lt;la classe ou autre>.

Il faut juste se méfier d’une chose : que la documentation sur laquelle vous tombez corresponde bien à la version courante. Car Phoenix/Elixir étant un framework et un langage jeune (une dizaine d’années au moment où j’écris ces lignes) il y a des fortes évolutions et une compatibilité descendante très faible.

## try2

Pour poursuivre, on va créer une table `taches` pour essayer les formulaires travaillant avec la base de données.

J’ai créé un nouveau schéma avec la commande :

~~~bash
> mix phx.gen.schema Tache taches titre:string \
		description:string due_at:naive_datetime \
		start_at:naive_datetime
~~~

Ça a créé :

* le fichier path(<app>/lib/try1>tache.ex) contenant le schéma de la table ainsi qu’une méthode `changeset`
* une migration dans path(priv/repo/migrations)

Je joue la migration avec :

~~~bash
> mix ecto.migrate
~~~

Je vais créer une nouvelle route qui permette de créer une nouvelle tâche (note : bien sûr, je pourrais le faire très rapidement avec une command mix, mais je préfère passer par toutes les étapes pour bien comprendre).

J’ajoute à path(router.ex) la ligne : 

~~~elixir
scope "/taches", Try1Web do
  pipe_through :browser

	get "/new", Tache, :new
end
~~~

Je dois pouvoir la rejoindre avec l’url [http://localhost:4000/taches/new](http://localhost:4000/taches/new).

Je crée le module live qui va permettre de gérer cette route. Pour le moment, je mets dans ce fichier `try1_web/live/taches/tache.ex` :

~~~elixir
defmodule Try1Web.Tache do

  use Phoenix.LiveView

  def mount(_params, _session, socket) do
    {:ok, socket}
  end

  def render(assigns) do
    ~H"""
    <div>Ici, bientôt, on pourra créer une tâche !</div>
    """
  end

end
~~~

… qui suffit à afficher la page.

Je vais devoir faire plusieurs choses *from scratch* pour pouvoir faire fonctionner le formulaire.

Je l’implémente déjà dans mon `render` :

~~~elixir
def render(assigns) do
  ~H"""
  <h2>Nouvelle tâche</h2>
  <.form 
      for={@form} 
      phx-change="validate" 
      phx-submit="save">
    <.input 
      type="text" 
      field={@form[:titre]} />
    <.input 
      type="textarea" 
      field={@form[:description]} />
  </.form>
  """
end
~~~

Mais pour le moment, les `<.form` et autres `<.input` sont des helpers inconnus. 

Il faut les ajouter dans path(/lib/try1_web/components/core_components.ex) en copiant le code d’une autre application par exemple (ou en le générant en créant une classe arbitraire avec `mix phx.gen.html` ou similaire) et en corrigeant le nom du module.

Le code que j’ai copié est le suivant (ici, j’ai retiré tous les commentaires) :

~~~elixir
# Dans lib/try1_web/components/core_components.ex

defmodule Try1Web.CoreComponents do
  @moduledoc """
  Provides core UI components.
  ...
  """
  use Phoenix.Component

  alias Phoenix.LiveView.JS
  import Try1Web.Gettext

  attr :id, :string, required: true
  attr :show, :boolean, default: false
  attr :on_cancel, JS, default: %JS{}
  slot :inner_block, required: true

  def modal(assigns) do
    ~H"""
    <div
      id={@id}
      phx-mounted={@show && show_modal(@id)}
      phx-remove={hide_modal(@id)}
      data-cancel={JS.exec(@on_cancel, "phx-remove")}
      class="relative z-50 hidden"
    >
      <div id={"#{@id}-bg"} class="bg-zinc-50/90 fixed inset-0 transition-opacity" aria-hidden="true" />
      <div
        class="fixed inset-0 overflow-y-auto"
        aria-labelledby={"#{@id}-title"}
        aria-describedby={"#{@id}-description"}
        role="dialog"
        aria-modal="true"
        tabindex="0"
      >
        <div class="flex min-h-full items-center justify-center">
          <div class="w-full max-w-3xl p-4 sm:p-6 lg:py-8">
            <.focus_wrap
              id={"#{@id}-container"}
              phx-window-keydown={JS.exec("data-cancel", to: "##{@id}")}
              phx-key="escape"
              phx-click-away={JS.exec("data-cancel", to: "##{@id}")}
              class="shadow-zinc-700/10 ring-zinc-700/10 relative hidden rounded-2xl bg-white p-14 shadow-lg ring-1 transition"
            >
              <div class="absolute top-6 right-5">
                <button
                  phx-click={JS.exec("data-cancel", to: "##{@id}")}
                  type="button"
                  class="-m-3 flex-none p-3 opacity-20 hover:opacity-40"
                  aria-label={gettext("close")}
                >
                  <.icon name="hero-x-mark-solid" class="h-5 w-5" />
                </button>
              </div>
              <div id={"#{@id}-content"}>
                <%= render_slot(@inner_block) %>
              </div>
            </.focus_wrap>
          </div>
        </div>
      </div>
    </div>
    """
  end

  attr :id, :string, doc: "the optional id of flash container"
  attr :flash, :map, default: %{}, doc: "the map of flash messages to display"
  attr :title, :string, default: nil
  attr :kind, :atom, values: [:info, :error], doc: "used for styling and flash lookup"
  attr :rest, :global, doc: "the arbitrary HTML attributes to add to the flash container"

  slot :inner_block, doc: "the optional inner block that renders the flash message"

  def flash(assigns) do
    assigns = assign_new(assigns, :id, fn -> "flash-#{assigns.kind}" end)

    ~H"""
    <div
      :if={msg = render_slot(@inner_block) || Phoenix.Flash.get(@flash, @kind)}
      id={@id}
      phx-click={JS.push("lv:clear-flash", value: %{key: @kind}) |> hide("##{@id}")}
      role="alert"
      class={[
        "fixed top-2 right-2 mr-2 w-80 sm:w-96 z-50 rounded-lg p-3 ring-1",
        @kind == :info && "bg-emerald-50 text-emerald-800 ring-emerald-500 fill-cyan-900",
        @kind == :error && "bg-rose-50 text-rose-900 shadow-md ring-rose-500 fill-rose-900"
      ]}
      {@rest}
    >
      <p :if={@title} class="flex items-center gap-1.5 text-sm font-semibold leading-6">
        <.icon :if={@kind == :info} name="hero-information-circle-mini" class="h-4 w-4" />
        <.icon :if={@kind == :error} name="hero-exclamation-circle-mini" class="h-4 w-4" />
        <%= @title %>
      </p>
      <p class="mt-2 text-sm leading-5"><%= msg %></p>
      <button type="button" class="group absolute top-1 right-1 p-2" aria-label={gettext("close")}>
        <.icon name="hero-x-mark-solid" class="h-5 w-5 opacity-40 group-hover:opacity-70" />
      </button>
    </div>
    """
  end

  attr :flash, :map, required: true, doc: "the map of flash messages"
  attr :id, :string, default: "flash-group", doc: "the optional id of flash container"

  def flash_group(assigns) do
    ~H"""
    <div id={@id}>
      <.flash kind={:info} title={gettext("Success!")} flash={@flash} />
      <.flash kind={:error} title={gettext("Error!")} flash={@flash} />
      <.flash
        id="client-error"
        kind={:error}
        title={gettext("We can't find the internet")}
        phx-disconnected={show(".phx-client-error #client-error")}
        phx-connected={hide("#client-error")}
        hidden
      >
        <%= gettext("Attempting to reconnect") %>
        <.icon name="hero-arrow-path" class="ml-1 h-3 w-3 animate-spin" />
      </.flash>

      <.flash
        id="server-error"
        kind={:error}
        title={gettext("Something went wrong!")}
        phx-disconnected={show(".phx-server-error #server-error")}
        phx-connected={hide("#server-error")}
        hidden
      >
        <%= gettext("Hang in there while we get back on track") %>
        <.icon name="hero-arrow-path" class="ml-1 h-3 w-3 animate-spin" />
      </.flash>
    </div>
    """
  end

  attr :for, :any, required: true, doc: "the data structure for the form"
  attr :as, :any, default: nil, doc: "the server side parameter to collect all input under"

  attr :rest, :global,
    include: ~w(autocomplete name rel action enctype method novalidate target multipart),
    doc: "the arbitrary HTML attributes to apply to the form tag"

  slot :inner_block, required: true
  slot :actions, doc: "the slot for form actions, such as a submit button"

  def simple_form(assigns) do
    ~H"""
    <.form :let={f} for={@for} as={@as} {@rest}>
      <div class="mt-10 space-y-8 bg-white">
        <%= render_slot(@inner_block, f) %>
        <div :for={action <- @actions} class="mt-2 flex items-center justify-between gap-6">
          <%= render_slot(action, f) %>
        </div>
      </div>
    </.form>
    """
  end


  attr :type, :string, default: nil
  attr :class, :string, default: nil
  attr :rest, :global, include: ~w(disabled form name value)

  slot :inner_block, required: true

  def button(assigns) do
    ~H"""
    <button
      type={@type}
      class={[
        "phx-submit-loading:opacity-75 rounded-lg bg-zinc-900 hover:bg-zinc-700 py-2 px-3",
        "text-sm font-semibold leading-6 text-white active:text-white/80",
        @class
      ]}
      {@rest}
    >
      <%= render_slot(@inner_block) %>
    </button>
    """
  end

  attr :id, :any, default: nil
  attr :name, :any
  attr :label, :string, default: nil
  attr :value, :any

  attr :type, :string,
    default: "text",
    values: ~w(checkbox color date datetime-local email file month number password
               range search select tel text textarea time url week)

  attr :field, Phoenix.HTML.FormField,
    doc: "a form field struct retrieved from the form, for example: @form[:email]"

  attr :errors, :list, default: []
  attr :checked, :boolean, doc: "the checked flag for checkbox inputs"
  attr :prompt, :string, default: nil, doc: "the prompt for select inputs"
  attr :options, :list, doc: "the options to pass to Phoenix.HTML.Form.options_for_select/2"
  attr :multiple, :boolean, default: false, doc: "the multiple flag for select inputs"

  attr :rest, :global,
    include: ~w(accept autocomplete capture cols disabled form list max maxlength min minlength
                multiple pattern placeholder readonly required rows size step)

  def input(%{field: %Phoenix.HTML.FormField{} = field} = assigns) do
    errors = if Phoenix.Component.used_input?(field), do: field.errors, else: []

    assigns
    |> assign(field: nil, id: assigns.id || field.id)
    |> assign(:errors, Enum.map(errors, &translate_error(&1)))
    |> assign_new(:name, fn -> if assigns.multiple, do: field.name <> "[]", else: field.name end)
    |> assign_new(:value, fn -> field.value end)
    |> input()
  end

  def input(%{type: "checkbox"} = assigns) do
    assigns =
      assign_new(assigns, :checked, fn ->
        Phoenix.HTML.Form.normalize_value("checkbox", assigns[:value])
      end)

    ~H"""
    <div>
      <label class="flex items-center gap-4 text-sm leading-6 text-zinc-600">
        <input type="hidden" name={@name} value="false" disabled={@rest[:disabled]} />
        <input
          type="checkbox"
          id={@id}
          name={@name}
          value="true"
          checked={@checked}
          class="rounded border-zinc-300 text-zinc-900 focus:ring-0"
          {@rest}
        />
        <%= @label %>
      </label>
      <.error :for={msg <- @errors}><%= msg %></.error>
    </div>
    """
  end
~~~

Et ensuite (j'ai dû découper pour la coloration syntaxique) :

~~~elixir
  def input(%{type: "select"} = assigns) do
    ~H"""
    <div>
      <.label for={@id}><%= @label %></.label>
      <select
        id={@id}
        name={@name}
        class="mt-2 block w-full rounded-md border border-gray-300 bg-white shadow-sm focus:border-zinc-400 focus:ring-0 sm:text-sm"
        multiple={@multiple}
        {@rest}
      >
        <option :if={@prompt} value=""><%= @prompt %></option>
        <%= Phoenix.HTML.Form.options_for_select(@options, @value) %>
      </select>
      <.error :for={msg <- @errors}><%= msg %></.error>
    </div>
    """
  end

~~~

~~~elixir

  def input(%{type: "textarea"} = assigns) do
    ~H"""
    <div>
      <.label for={@id}><%= @label %></.label>
      <textarea
        id={@id}
        name={@name}
        class={[
          "mt-2 block w-full rounded-lg text-zinc-900 focus:ring-0 sm:text-sm sm:leading-6 min-h-[6rem]",
          @errors == [] && "border-zinc-300 focus:border-zinc-400",
          @errors != [] && "border-rose-400 focus:border-rose-400"
        ]}
        {@rest}
      ><%= Phoenix.HTML.Form.normalize_value("textarea", @value) %></textarea>
      <.error :for={msg <- @errors}><%= msg %></.error>
    </div>
    """
  end

  # All other inputs text, datetime-local, url, password, etc. are handled here...
  def input(assigns) do
    ~H"""
    <div>
      <.label for={@id}><%= @label %></.label>
      <input
        type={@type}
        name={@name}
        id={@id}
        value={Phoenix.HTML.Form.normalize_value(@type, @value)}
        class={[
          "mt-2 block w-full rounded-lg text-zinc-900 focus:ring-0 sm:text-sm sm:leading-6",
          @errors == [] && "border-zinc-300 focus:border-zinc-400",
          @errors != [] && "border-rose-400 focus:border-rose-400"
        ]}
        {@rest}
      />
      <.error :for={msg <- @errors}><%= msg %></.error>
    </div>
    """
  end

  @doc """
  Renders a label.
  """
  attr :for, :string, default: nil
  slot :inner_block, required: true

  def label(assigns) do
    ~H"""
    <label for={@for} class="block text-sm font-semibold leading-6 text-zinc-800">
      <%= render_slot(@inner_block) %>
    </label>
    """
  end

  @doc """
  Generates a generic error message.
  """
  slot :inner_block, required: true

  def error(assigns) do
    ~H"""
    <p class="mt-3 flex gap-3 text-sm leading-6 text-rose-600">
      <.icon name="hero-exclamation-circle-mini" class="mt-0.5 h-5 w-5 flex-none" />
      <%= render_slot(@inner_block) %>
    </p>
    """
  end

  @doc """
  Renders a header with title.
  """
  attr :class, :string, default: nil

  slot :inner_block, required: true
  slot :subtitle
  slot :actions

  def header(assigns) do
    ~H"""
    <header class={[@actions != [] && "flex items-center justify-between gap-6", @class]}>
      <div>
        <h1 class="text-lg font-semibold leading-8 text-zinc-800">
          <%= render_slot(@inner_block) %>
        </h1>
        <p :if={@subtitle != []} class="mt-2 text-sm leading-6 text-zinc-600">
          <%= render_slot(@subtitle) %>
        </p>
      </div>
      <div class="flex-none"><%= render_slot(@actions) %></div>
    </header>
    """
  end

  @doc ~S"""
  Renders a table with generic styling.

  ## Examples

      <.table id="users" rows={@users}>
        <:col :let={user} label="id"><%= user.id %></:col>
        <:col :let={user} label="username"><%= user.username %></:col>
      </.table>
  """
  attr :id, :string, required: true
  attr :rows, :list, required: true
  attr :row_id, :any, default: nil, doc: "the function for generating the row id"
  attr :row_click, :any, default: nil, doc: "the function for handling phx-click on each row"

  attr :row_item, :any,
    default: &Function.identity/1,
    doc: "the function for mapping each row before calling the :col and :action slots"

  slot :col, required: true do
    attr :label, :string
  end

  slot :action, doc: "the slot for showing user actions in the last table column"

  def table(assigns) do
    assigns =
      with %{rows: %Phoenix.LiveView.LiveStream{}} <- assigns do
        assign(assigns, row_id: assigns.row_id || fn {id, _item} -> id end)
      end

    ~H"""
    <div class="overflow-y-auto px-4 sm:overflow-visible sm:px-0">
      <table class="w-[40rem] mt-11 sm:w-full">
        <thead class="text-sm text-left leading-6 text-zinc-500">
          <tr>
            <th :for={col <- @col} class="p-0 pb-4 pr-6 font-normal"><%= col[:label] %></th>
            <th :if={@action != []} class="relative p-0 pb-4">
              <span class="sr-only"><%= gettext("Actions") %></span>
            </th>
          </tr>
        </thead>
        <tbody
          id={@id}
          phx-update={match?(%Phoenix.LiveView.LiveStream{}, @rows) && "stream"}
          class="relative divide-y divide-zinc-100 border-t border-zinc-200 text-sm leading-6 text-zinc-700"
        >
          <tr :for={row <- @rows} id={@row_id && @row_id.(row)} class="group hover:bg-zinc-50">
            <td
              :for={{col, i} <- Enum.with_index(@col)}
              phx-click={@row_click && @row_click.(row)}
              class={["relative p-0", @row_click && "hover:cursor-pointer"]}
            >
              <div class="block py-4 pr-6">
                <span class="absolute -inset-y-px right-0 -left-4 group-hover:bg-zinc-50 sm:rounded-l-xl" />
                <span class={["relative", i == 0 && "font-semibold text-zinc-900"]}>
                  <%= render_slot(col, @row_item.(row)) %>
                </span>
              </div>
            </td>
            <td :if={@action != []} class="relative w-14 p-0">
              <div class="relative whitespace-nowrap py-4 text-right text-sm font-medium">
                <span class="absolute -inset-y-px -right-4 left-0 group-hover:bg-zinc-50 sm:rounded-r-xl" />
                <span
                  :for={action <- @action}
                  class="relative ml-4 font-semibold leading-6 text-zinc-900 hover:text-zinc-700"
                >
                  <%= render_slot(action, @row_item.(row)) %>
                </span>
              </div>
            </td>
          </tr>
        </tbody>
      </table>
    </div>
    """
  end

  @doc """
  Renders a data list.

  ## Examples

      <.list>
        <:item title="Title"><%= @post.title %></:item>
        <:item title="Views"><%= @post.views %></:item>
      </.list>
  """
  slot :item, required: true do
    attr :title, :string, required: true
  end

  def list(assigns) do
    ~H"""
    <div class="mt-14">
      <dl class="-my-4 divide-y divide-zinc-100">
        <div :for={item <- @item} class="flex gap-4 py-4 text-sm leading-6 sm:gap-8">
          <dt class="w-1/4 flex-none text-zinc-500"><%= item.title %></dt>
          <dd class="text-zinc-700"><%= render_slot(item) %></dd>
        </div>
      </dl>
    </div>
    """
  end

  @doc """
  Renders a back navigation link.

  ## Examples

      <.back navigate={~p"/posts"}>Back to posts</.back>
  """
  attr :navigate, :any, required: true
  slot :inner_block, required: true

  def back(assigns) do
    ~H"""
    <div class="mt-16">
      <.link
        navigate={@navigate}
        class="text-sm font-semibold leading-6 text-zinc-900 hover:text-zinc-700"
      >
        <.icon name="hero-arrow-left-solid" class="h-3 w-3" />
        <%= render_slot(@inner_block) %>
      </.link>
    </div>
    """
  end

  @doc """
  Renders a [Heroicon](https://heroicons.com).

  Heroicons come in three styles – outline, solid, and mini.
  By default, the outline style is used, but solid and mini may
  be applied by using the `-solid` and `-mini` suffix.

  You can customize the size and colors of the icons by setting
  width, height, and background color classes.

  Icons are extracted from the `deps/heroicons` directory and bundled within
  your compiled app.css by the plugin in your `assets/tailwind.config.js`.

  ## Examples

      <.icon name="hero-x-mark-solid" />
      <.icon name="hero-arrow-path" class="ml-1 w-3 h-3 animate-spin" />
  """
  attr :name, :string, required: true
  attr :class, :string, default: nil

  def icon(%{name: "hero-" <> _} = assigns) do
    ~H"""
    <span class={[@name, @class]} />
    """
  end

  ## JS Commands

  def show(js \\ %JS{}, selector) do
    JS.show(js,
      to: selector,
      time: 300,
      transition:
        {"transition-all transform ease-out duration-300",
         "opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95",
         "opacity-100 translate-y-0 sm:scale-100"}
    )
  end

  def hide(js \\ %JS{}, selector) do
    JS.hide(js,
      to: selector,
      time: 200,
      transition:
        {"transition-all transform ease-in duration-200",
         "opacity-100 translate-y-0 sm:scale-100",
         "opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"}
    )
  end

  def show_modal(js \\ %JS{}, id) when is_binary(id) do
    js
    |> JS.show(to: "##{id}")
    |> JS.show(
      to: "##{id}-bg",
      time: 300,
      transition: {"transition-all transform ease-out duration-300", "opacity-0", "opacity-100"}
    )
    |> show("##{id}-container")
    |> JS.add_class("overflow-hidden", to: "body")
    |> JS.focus_first(to: "##{id}-content")
  end

  def hide_modal(js \\ %JS{}, id) do
    js
    |> JS.hide(
      to: "##{id}-bg",
      transition: {"transition-all transform ease-in duration-200", "opacity-100", "opacity-0"}
    )
    |> hide("##{id}-container")
    |> JS.hide(to: "##{id}", transition: {"block", "block", "hidden"})
    |> JS.remove_class("overflow-hidden", to: "body")
    |> JS.pop_focus()
  end

  @doc """
  Translates an error message using gettext.
  """
  def translate_error({msg, opts}) do
    # When using gettext, we typically pass the strings we want
    # to translate as a static argument:
    #
    #     # Translate the number of files with plural rules
    #     dngettext("errors", "1 file", "%{count} files", count)
    #
    # However the error messages in our forms and APIs are generated
    # dynamically, so we need to translate them by calling Gettext
    # with our gettext backend as first argument. Translations are
    # available in the errors.po file (as we use the "errors" domain).
    if count = opts[:count] do
      Gettext.dngettext(Try1Web.Gettext, "errors", msg, msg, count, opts)
    else
      Gettext.dgettext(Try1Web.Gettext, "errors", msg, opts)
    end
  end

  @doc """
  Translates the errors for a field from a keyword list of errors.
  """
  def translate_errors(errors, field) when is_list(errors) do
    for {^field, {msg, opts}} <- errors, do: translate_error({msg, opts})
  end
end
~~~

Il faut ensuite importer ce module dans `live/taches/tache.ex` :

~~~elixir
defmodule Try1Web.Tache do

  use Phoenix.LiveView
  import Try1Web.CoreComponents  # <===== ÇA
  
  ...
~~~

Et enfin, pour que `@form` existe dans la vue, il faut que je l’ajoute dans le `socket`, dans `mount` :

~~~elixir
  def mount(_params, _session, socket) do
  	changeset = Try1.Tache.changeset(%Tache{}, %{})
    { :ok, 
    	assign(socket, form: to_form(changeset))
    }
  end
~~~

Noter qu’on envoie un « changeset » ci-dessus. Je ne comprends pas encore pourquoi c’est si nécessaire, mais cela relève de la méthode `changeset` de la définition de schéma, qui permet de valider les données avant leur persistance (et de caster leurs valeurs).

Cette fois, l’embryon de formulaire apparait !

Mais il ne fonctionne pas encore (on produit une erreur en tapant une simple lettre dans un des deux champs), parce qu’il faut faire les fonctions évènements qui vont capturer les `validate` et `save` que j’utilise dans la définition du formulaire :

~~~heex
<.form
	for={@form}
	phx-change="validate"
	phx-submit="save"
	/>
~~~

Le `phx-change` définit l’évènement qui sera déclenché lorsqu’on modifie le formulaire (l’évènement `validate` ici) tandis que le `phx-submit` définit l’évènement qui sera déclenché quand on soumettra le formulaire (donc l’évènement `save` ici).

La définition de base va être :

~~~elixir
# dans live/taches/tache.ex

def handle_event("validate", _params, socket) do
	{:noreply, socket}
end

def handle_event("save", _params, socket) do
	{:noreply, socket}
end
~~~

Cette fois, ça ne fait rien, mais ça ne lève plus d’erreur. On peut même voir dans les retours console les choses qu’on peut taper dans les deux champs.

Comme on veut récupérer les données de notre tâche dans les `params`, on va faire  :

> Note : je ne comprends pas encore pourquoi ça se trouve dans « tache » alors que je n’ai rien spécifié. C’est peut-être parce qu’il s’agit de la pseudo-classe `Tache` ?

J’ajoute un `IO.inspect` pour voir les données.

~~~elixir
def handle_event(
	"validate", 
	%{"tache" => tache}, 
	socket
) do

	IO.puts "tache/"
	IO.inspect(tache)
	IO.puts "/tache"
	{:noreply, socket}
end

~~~

Je ne m’explique pas encore parfaitement bien le `:noreply` mais ça signifie en quelque sorte qu’il ne faut pas renvoyer de page html.

Cette fois, dans la console, je peux voir la table `tache` avec le titre et la description que j’ai rentrés.

Je vais ajouter **la validation** à faire dans cette fonction, qui est là pour ça. Mais pour que ça produise quelque chose, je vais ajouter une condition dans le changeset :

~~~elixir
# dans lib/try1/tache.ex (schéma)

...

@doc false
def changeset(tache, attrs) do
    tache
    |> cast(attrs, [...])
    |> validate_required([...])
    |> validate_length(:titre, min: 5, max: 20) # <====
  end
end

~~~

> Donc, à la ligne 10, j’ai ajouté une condition sur la longueur. Il faut que le titre fasse au moins 5 caractères de long mais pas plus de 20. Ça génèrera une erreur dans le cas contraire.

Et dans le validateur, j’ajoute :

~~~elixir
# Dans lib/try1_web/live/taches/tache.ex

def handle_event("validate", %{"tache" => params}, socket) do
	form =
  	%Tache{}
    |> Tache.changeset(params) # <====
    |> to_form(action: :validate)

    {:noreply, assign(socket, :form, form)}
  end
  
~~~

Par cette ligne 6, les données vont être checkées à chaque changement (dès qu’un caractère est tapé, ici).

Quand on entre le titre, l’erreur « trop court » apparait, elle disparait quand on dépasse les 4 caractères et l’erreur « trop long » apparait quand on dépasse les 20 caractères.

That’s it!

### Enregistrement des données

On va passer à la grande étape suivante : l’enregistrement d’une première tâche.

Pour ce faire, on doit implémenter la méthode `handle_event("save"...)`. En m’appuyant sur l’exemple du mode d’emploi Phoenix LiveView, je peux commencer par mettre :

~~~elixir
def handle_event("save", %{"tache" => tparams}, socket) do
	case Taches.creer_la_tache(tparams) do
		{:ok, tache} ->
			IO.puts "La tâche a été créée !"
		{:error, %Ecto.Changeset{} = changeset} ->
			{:noreply, assign(socket, form: to_form(changeset))}
	end
end
~~~

Ne pas oublier d’ajouter au-dessus du fichier ci-dessus la ligne :

~~~elixir
  alias Try1.Taches
~~~

… pour pouvoir utiliser simplement `Taches` sans `Try1.Taches`.

Et il ne faut pas oublier d’ajouter un bouton pour soumettre le formulaire.

~~~html
# Dans tache.ex (fonction render)

   <h2>Nouvelle tâche</h2>
    <.form 
       for={@form} 
       phx-change="validate" 
       phx-submit="save">
      <.input 
         type="text" field={@form[:titre]} />
      <.input 
         type="textarea" field={@form[:description]} />
      <.input 
        type="submit" 
        value="Enregistrer" 
        name="save" />
    </.form>
~~~

C’est ce que font les lignes 12 à 15.

> La propriété `value` permet de donner le nom au bouton. La propriété `name` est obligatoire mais je ne sais pas encore à quoi elle sert.

Le problème, c’est que la méthode `Taches.creer_la_tache` n’existe pas donc ça génère une erreur lorsque j’essaie de cliquer sur « Enregistrer ».

> Bien sûr, lorsqu’on aura bien tout compris, on pourra créer automatiquement ces méthodes avec les modules `mix`. Mais pour le moment, il faut les faire à la main.

Cette méthode doit être créée dans un module `taches.ex` qui définira le module `Try1.Taches` . J’ai été regardé dans un autre programme pour trouver la formule, toute simple en fait.

~~~elixir
# in lib/try1/taches.ex

defmodule Try1.Taches do

  import Ecto.Query, warn: false
  alias Try1.Repo
  alias Try1.Tache
  
	def creer_la_tache(tache) do
    %Tache{}
    |> Tache.changeset(attrs)
    |> Repo.insert()	
	end
end
~~~

Comme plus haut — et il faut y penser chaque fois — la ligne 7 (`alias Try1.Tache`) permet d’utiliser `Tache` tout seul.

Cette fois, si je soumets le formulaire (vide), ça fonctionne ! en générant une erreur.

Je tente maintenant sans erreur, en renseignant convenablement les champs.

Mais ça ne fonctionne pas, parce que mon bouton pour soumettre n’est pas valide… Je le change dans le formulaire pour :

~~~html
<.button type="submit">Enregistrer la tâche</.button>
~~~

Pour le moment, ça ne passe pas… même si ça ne génère plus d’erreur…

Un `IO.puts "Je passe par -> creer_la_tache"` placé dans la fonction `creer_la_tache` m’indique qu’on passe bien par cette méthode.

Pourtant, rien n’est enregistré dans la base de données. Et rien n’est retourné.

Je modifie `creer_la_tache` pour qu’elle retourne un `{:ok, tache}` :

~~~elixir
def creer_la_tache(attrs \\ %{}) do
	tache = %Tache{}
    |> Tache.changeset(attrs)
    |> Repo.insert()
  {:ok, tache}
end
~~~

Et j’ajoute `{:ok, socket}` pour que la méthode évènement retourne une valeur valide :

~~~elixir
def handle_event("save", %{"tache" => tparams}, socket) do
  case Taches.creer_la_tache(tparams) do
    {:ok, _tache} ->
      IO.puts "Tâche créée avec succès."
      {:noreply, socket}
    {:error, %Ecto.Changeset{} = changeset} ->
      {	:noreply, 
      	assign(socket, form: to_form(changeset))
      }
  end
end
~~~

Cette fois ça passe, ça affiche bien « Tâche créée avec succès. » sauf que… Ça n’enregistre rien dans la table, apparemment…

Quelques petites modifications pour que ça passe :

* les dates `due_at` et `start_at` sont requises. Ça ne peut pas passer sans
  => je garde juste le `due_at` comme requis. Ça donne, dans le changeset :

  ~~~elixir
  |> validate_required([:titre, :description, :due_at])
  ~~~

* j’ajoute le champ de formulaire (après quelques recherches infructueuses et l’aide de ChatGPT) :
  ~~~elixir
  <.input 
  	type="datetime-local" 
  	field={@form[:due_at]} />
  <.input 
  	type="datetime-local" 
  	field={@form[:start_at]} />
  
  ~~~

Et maintenant je soumets le formulaire en ayant choisi une date et… ça fonctionne !

Pour le moment, je ne peux le voir que dans la table en faisant :

~~~
> psql -U philippeperret
psql> \connect try1_dev
try1_dev=# SELECT * FROM taches;
=> Affiche la donnée !
~~~

<%= raw link_other_pages(@page_index, @projet) %>
