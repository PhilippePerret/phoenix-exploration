load(_entete)

### Reprise du développement du traitement de markdown

Je vais poursuivre les tests entamer dans la section précédente.

D'abord, pour les rendre confortable, j'ouvre un Terminal dans mon dossier p(pharkdown) et je joue `iex -S mix run` ce qui lance l'application et va me permettre d’interagir avec elle. Par exemple, je vais pouvoir faire :

 `iex> PPMarkdown.Engine.compile("path/de/mon/fichier.mmd")` 

… pour tester la ou les méthodes en direct.

Chaque fois que je changerai mon code je jouerai `iex> recompile()` pour… recompiler le code.

`PPMarkdown.Engine.compile/2` est la méthode qui je veux essentiellement tester. Je voudrais que les tests soient aussi simples que :

~~~elixir

test "un test particulier" do
  actual = get_output_of("mon_fichier.mmd")
  assert actual == expected("""
  <p>Le code attendu</p>
  """)
end
~~~

Je vais utiliser la méthode `expected/1` parce que le code que je fournis, en *heredoc*, contient forcément des retours chariots que je ne désire pas.

D’autre part, comme je ne veux pas ré-implémenter mes méthodes `get_output_of/1` et `expected/1` dans chaque fichier test, je vais les mettre dans un module `TestHelper` dans mon fichier p(test/test_helper.exs). Et je ferai un `alias TestHelper, as: T` en haut de chaque fichier pour pouvoir utiliser, au final :

~~~elixir

alias TestHelper, as: T

test "un test particulier" do
  actual = T.get_output_of("mon_fichier.mmd")
  assert actual == T.expected("""
  Le code attendu
  """)
end
~~~

J'implémente ces deux méthodes de cette façon :

~~~elixir
# in test/test_helper.exs

def get_output_of(filename, options) do
  if options do
  	Application.put_env(:pharkdown, :options, options)
  end
  {:__block__, _, liste} = Engine.compile(
  	"test/fixtures/textes/#{filename}", filename)
  Keyword.get(liste, :safe)
end
def get_output_of(filename) do
  get_output_of(filename, nil)
end

def expected(string) do
  string = string
  |> String.replace("\n", "")
  [string]
end

~~~

Et je veux implémenter le nouveau fonctionnement, en séparant dès le départ les blocs de code (entre <%= "~" <> "~~ ... ~~" <> "~" %>) du reste, pour deux raisons :

* pour pouvoir leur appliquer `Makeup.highlight` (qui attend seulement un bloc de code),
* pour leur appliquer un traitement minimal des autres traitement (pas de traiter des `<% ... %>`, des marques d’italique, etc.).

Pour les dispatcher, j’utilise une fonction `dispatch_section/1` implémentée ainsi :

~~~elixir
defp dispatch_sections(code) do
  {blocks, letexte} =
  Regex.scan(@reg_code_block, code)
  |> Enum.with_index(0)
  |> Enum.reduce({[], code}, fn {matches, index}, {blocks, acc} -> 
    block = hd(matches)
    {blocks ++ [block], String.replace(acc, block, "__BLOCKCODE#{index}__")}
  end)
  %{marked_text: letexte, original_text: code, blocks: blocks}
end
~~~

### Checksum

Non, mais ne fait, comme je vas me retrouver à tester du code assez compliqué, je vais plutôt utiliser un checksum pour vérifier le code.

> Pour ceux qui l’ignoreraient, vérifier avec le checksum consiste à produire avec le texte une sorte de clé, par exemple « 92CB14609AB322495B4573AFA1236A5A77BCD85CA12CAA2ED4EBAD051DB93E86 » en hashant le texte. Puisqu’un même texte produit <u>toujours</u> la même clé, il suffit de comparer deux clés pour savoir que deux textes sont identiques.

Je crée la méthode `T.checksum` qui va calculer le checksum du texte produit :

~~~elixir
# in test/test_helper.exs

defmodule TestHelper do
	...
	def checksum(string) do
    :crypto.hash(:sha256, string) |> Base.encode16
	end
~~~

Je vais aussi faire une méthode `get_checksum_of/2` qui va retourner le checksum du contenu du fichier plutôt que son texte comme `get_output_of/2` (je garde quand même cette fonction pour les petits textes, pour que ce soit plus visuel).

~~~elixir
def get_checksum_of(name, options) do
	get_output_of(name, options)
	|> checksum
end
~~~

Pour mon confort, je vais encore simplifier les choses en faisant que les tests se résument à :

~~~elixir
test "mon test simple" do
	assert T.file_match?(
		"<nom du fichier>", 
		"92CB14609AB322495B4573AFA1236A5A77BC...", 
		@options)
end
~~~

> Il faudra que j’apprenne à faire les macros pour pouvoir avoir juste `assert file_is_ok(...)`.



### Prise en compte des changements dans les autres applications

Si on modifie une extension (comme mon `pharkdown`), pour pouvoir utiliser aussitôt les modifications dans une autre application qui l’utiliserait (en app locale), il faut obligatoirement redémarrer le serveur de cette application, évidemment. 

### Styliser et identifier les paragraphes

Je voudrais que l’on puisse utiliser cette tournure :

~~~document
classcss.Mon paragraphe trop stylé.
~~~

… pour obtenir :

~~~html
<p class="classcss">Mon paragraphe trop stylé.</p>
~~~

Ou encore :

~~~document
moncss.monid# Le paragraphe stylé et identifié !
~~~

… pour obtenir :

~~~html
<p id="monid" class="moncss">
  Le paragraphe stylé et identifié !
</p>
~~~

Et enfin :

~~~document
style1.style2.Mon paragraphe vraiment trop stylé
~~~

… pour obtenir :

~~~html
<p class="style1 style2">
  Mon paragraphe vraiment trop stylé
</p>
~~~

Pour ça, je vais devoir m’intéresser de près aux type `Regex` parce que mes premiers essais ne sont pas concluants.

load(_pied_de_page)