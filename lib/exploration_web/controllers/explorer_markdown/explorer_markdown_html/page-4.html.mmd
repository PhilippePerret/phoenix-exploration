<%= raw @titre %>
<%= raw link_other_pages(@page_index, @projet) %>

### Implémentation des tests

J'ai déjà fait quelques tests en Elixir avec Phoenix, mais je dois reprendre tout car je ne sais plus rien.

Déjà il faut que je crée mon dossier path(test) avec à l’intérieur le fichier path(test/test_helper.exs) que je copie simplement de mon application.

> Mais en fait, ce fichier ne contient que le code `ExUnit.start()`

La base d’un test, ensuite, d’après [ExUnit](https://hexdocs.pm/ex_unit/ExUnit.html), c’est :

~~~elixir
defmodule MonModuleDeTest do
	use ExUnit.Case, async: true
	
	test "Mon test" do
		assert true
	end
end
~~~

Pour le moment, je vais tester seulement ce qui rentre et sort de `PPMarkdown.compile` :

~~~elixir
defmodule PPMarkdownTest do
	use ExUnit.Case, async: true
	
	test "un simple paragraphe" do
		texte = "Un simple paragraphe"
		expected = "<p>Un simple paragraphe</p>"
		actual = PPMarkdown.compile(texte)
		assert actual == expected
	end

end 
~~~

…

Bon, ça ne fonctionne pas… Et ChatGPT ne m’a été d’aucune aide pour m’en sortir, je n’arrive pas à tester la dépendance dans la dépendance. 

Je décide de le faire directement dans mon application.

…

Après de nombreux errements, j’arrive à faire fonctionner un premier test :

~~~elixir
# J'essaie de tester ici pp_markdown puisque je n'y arrive pas dans l'extension elle-même
defmodule PPMarkdown.EngineTest do

  use ExUnit.Case

  alias PPMarkdown.Engine

  test "un simple paragraphe" do

    Application.put_all_env(pp_markdown: [server_tags: false])

    {:__block__, _, liste} = 
      "test/fixtures/textes/simple_paragraphe.mmd"
      |> Engine.compile("simple_paragraphe.mmd")
   
      actual = Keyword.get(liste, :safe)

    assert ["<p>Un simple paragraphe</p>"] == actual
    
  end

end

~~~

Et je peux m’apercevoir que le retour n’est pas bon du tout et correspond à ce que je peux voir sur le site.

### Travail sur le code de `PPMarkdown`

Avant de poursuivre, je voudrais rendre possible le fait de travailler sur ma dépendance (dans son dossier, bien sûr) mais sans avoir à tout recharger chaque fois dans l’application. ChatGPT m’indique comme faire. Il suffit, dans dans les deps de path(mix.exs) que je mette :

~~~elixir
{:pp_markdown, path: "chemin/vers/mon/dossier/local"},
~~~

… et normalement le tour est joué. Je vais essayer ça (avec de gros doutes quand même. Je place donc :

~~~elixir
{:pp_markdown, path: "../pp_markdown"},
~~~

… dans mon fichier path(mix.exs) puisque le dossier de l’application et de pp_markdown se trouvent au même niveau.

Et je `mix deps.clean pp_markdown` puis je `mix deps.get` … Sauf que la dépendance n’est pas chargée.

…

En fait, si, mais elle n’est pas listée (peut-être est-ce bon signe, puisque ça voudrait dire que je vais pouvoir changer le code à chaud, car il n’est pas compilé.

Et je `mix compile`. 

Je relance le test pour voir s’il fonctionne toujours. Non seulement il fonctionne, mais en plus il est presque positif cette fois ! Est-ce que ça vient du fait que j’ai supprimé les dépendances `makeup` et `makeup_elixir` que j’avais en double dans la dépendance et dans l’application ?… Ça m’étonnerait, mais bon…

Non, en fait, ça vient du fait que j’ai décommenté `Makeup.highlight`. Dans le compile. Je vais le remettre tout de suite pour voir si vraiment je peux traiter le code à chaud…

…

Bon, en fait, rien de ce que j’ai essayé ne fonctionne, en vrai.

### Nouvelle direction : l’app dans l’app

Je vais utilisé une nouvelle direction avec l’aide de ChatGPT : une « app dans l’app », c’est-à-dire que je vais créer et développer *PPMarkdown* à l’intérieur même de mon application (je garde quand même l’idée d’une dépendance et je l’enregistrerai comme ça).

Pour ça, je dois créer un dossier path(phoenix-exploration/apps) et j’y mets mon dossier path(pp_markdown) principal. J’ai mis bien sûr `/apps/` dans mon path(.gitignore) pour qu’il ne s’occupe pas de ce dossier.

Je dois mettre le dossier comme dépendance locale, donc dans path(mix.exs) :

~~~elixir
{:pp_markdown, path: "apps/pp_markdown"}
~~~

Pour que `PPMarkdown` soit démarrée automatiquement, il faut que je l’ajoute aux *extra_applications* de mon app principale : 

~~~elixir
def application do
	[
  	applications: [:phoenix],
    extra_applications: [:pp_markdown]
  ]
end

~~~







<%= raw link_other_pages(@page_index, @projet) %>