<%= raw @titre %>
<%= raw link_other_pages(@page_index, @projet) %>

### Implémentation des tests

J'ai déjà fait quelques tests en Elixir avec Phoenix, mais je dois reprendre tout car je ne sais plus rien.

Déjà il faut que je crée mon dossier path(test) avec à l’intérieur le fichier path(test/test_helper.exs) que je copie simplement de mon application.

> Mais en fait, ce fichier ne contient que le code `ExUnit.start()`

La base d’un test, ensuite, d’après [ExUnit](https://hexdocs.pm/ex_unit/ExUnit.html), c’est :

~~~elixir
defmodule MonModuleDeTest do
	use ExUnit.Case, async: true
	
	test "Mon test" do
		assert true
	end
end
~~~

Pour le moment, je vais tester seulement ce qui rentre et sort de `PPMarkdown.compile` :

~~~elixir
defmodule PPMarkdownTest do
	use ExUnit.Case, async: true
	
	test "un simple paragraphe" do
		texte = "Un simple paragraphe"
		expected = "<p>Un simple paragraphe</p>"
		actual = PPMarkdown.compile(texte)
		assert actual == expected
	end

end 
~~~

…

Bon, ça ne fonctionne pas… Et ChatGPT ne m’a été d’aucune aide pour m’en sortir, je n’arrive pas à tester la dépendance dans la dépendance. 

Je décide de le faire directement dans mon application.

…

Et je peux m’apercevoir que le retour n’est pas bon du tout et correspond à ce que je peux voir sur le site.

### Travail sur le code de `Pharkdown`

Avant de poursuivre, je voudrais rendre possible le fait de travailler sur ma dépendance (dans son dossier, bien sûr) mais sans avoir à tout recharger chaque fois dans l’application. ChatGPT m’indique comme faire. Il suffit, dans dans les deps de path(mix.exs) que je mette :

~~~elixir
{:pharkdown, path: "chemin/vers/mon/dossier/local"},
~~~

… et normalement le tour est joué. Je vais essayer ça (avec de gros doutes quand même. Je place donc :

~~~elixir
{:pharkdown, path: "../pharkdown"},
~~~

… dans mon fichier path(mix.exs) puisque le dossier de l’application et de pharkdown se trouvent au même niveau.

Et je `mix deps.clean pharkdown` puis je `mix deps.get` … Sauf que la dépendance n’est pas chargée.

…

En fait, si, mais elle n’est pas listée (peut-être est-ce bon signe, puisque ça voudrait dire que je vais pouvoir changer le code à chaud, car il n’est pas compilé.

Et je `mix compile`. 

Je relance le test pour voir s’il fonctionne toujours. Non seulement il fonctionne, mais en plus il est presque positif cette fois ! Est-ce que ça vient du fait que j’ai supprimé les dépendances `makeup` et `makeup_elixir` que j’avais en double dans la dépendance et dans l’application ?… Ça m’étonnerait, mais bon…

Non, en fait, ça vient du fait que j’ai décommenté `Makeup.highlight`. Dans le compile. Je vais le remettre tout de suite pour voir si vraiment je peux traiter le code à chaud…

…

Bon, en fait, rien de ce que j’ai essayé ne fonctionne, en vrai.

### Nouvelle direction : l’app dans l’app

--Je vais utiliser une nouvelle direction avec l’aide de ChatGPT : une « app dans l’app », c’est-à-dire que je vais créer et développer *PPMarkdown* à l’intérieur même de mon application (je garde quand même l’idée d’une dépendance et je l’enregistrerai comme ça).//Non, j'ai créé maintenant ma propre extension entièrement gérée comme une *vraie* extension--.

<a name="problemeroute"></a>

### Problèmes de route ou de chemin ?

Mais alors que je me débats déjà avec ces problèmes, j’en rencontre d’autres avec les href et sources qui ne sont pas bons. Mon problème — que je dois absolument résoudre — vient du fait que mon application se trouve dans un dossier (alors que tous les exemples qui sont montrés concernent une application à la racine.

Au départ, je pensais résoudre le problème avec un :

~~~html
<base href={~p"/"} />
~~~

… sauf que ça ne fonctionne pas avec les routes que je mets en dur.

La solution finale qui fonctionne consiste à utiliser toujours `~p"/"` en préfixe, qui contiendra toujours le nom du dossier de l’application.

Donc, par exemple, pour l’image du logo dans le fichier path(root.html.heex) j’utilise : 

~~~html 
<img src={(~p"/") <> "images/logo.svg"}
~~~

Pour les routes dynamiques, par exemple celles vers les pages suivantes je fais : 

~~~elixir
defp href_next_page(projet, page_index)
	~p{"/explorer"} <> "#{projet}?ipage=#{page_index + 1}"
	# => "/phoenix-exploration/explorer/tasker/?ipage=2
end
~~~

Bien sûr, pour que la tournure `~p{"/explorer"}` fonctionne il faut que cette route existe. Mais si elle n’existait pas, on pourrait faire tout simplement la même chose qu’avec le logo ci-dessus :

~~~elixir
defp href_next_page(projet, page_index)
	~p{"/"} <> "explorer/#{projet}?ipage=#{page_index + 1}"
	# => "/phoenix-exploration/explorer/tasker/?ipage=2
end
~~~

Bon… parfois je dois mettre path(/route) et d’autres fois path(route) mais bon, ça fonctionne. Il semblerait que pour les images, ne il faudrait pas de « / » tandis que pour les routes vers des pages, il en faudrait.


<%= raw link_other_pages(@page_index, @projet) %>