load(_entete)

### Expressions régulières

Donc, avant d’implémenter la transformation, je dois travailler un peu mieux les expressions régulières qui pour le moment de font pas ce que j’attends. 

Pour les travailler confortablement, je crée un fichier p(essai.exs) à la racine de mon extension p(pp_markdown) et je mets à l’intérieur :

~~~elixir
defmodule Essai do

	def run do
		IO.puts "-> run (je joue l'essai)"
	end
	
end

Essai.run
~~~

De cette manière, en console (Cmd+j dans Visual Studio Code), il me suffit de taper `mix run essai.exs` pour lancer l’essai.

Je vais découper l’opération petit à petit. Mais avant, une première note. Comme je vais passer en revue chaque ligne du texte, peut-être que je pourrais introduire d’autres modifications que celle que je veux accomplir. Et même que ce découpage en lignes soit la base du travail de mon module.

Une première ligne va permettre de découper en lignes mon texte, que j’appelle `html` :

~~~elixir
Regex.scan(~r/^(.*)$/m, html)
~~~

C’est la combinaison de l’option `/m` (multiline) et `^...$` (du début à la fin d’une ligne) qui me permet d’obtenir chaque ligne séparément. Si `html` contient :

~~~document
Une ligne
Une autre ligne

Encore une autre.
~~~

… le résultat sera : 

~~~bash
[
	["Une ligne", "Une ligne"],
	["Une autre ligne", "Une autre ligne"],
	["", ""],
	["Une ligne", "Une ligne"],
]
~~~

Je vais commencer par ne prendre que le premier élément pour faire une liste de String :

~~~elixir
|> Enum.map(fn l -> Enum.fetch!(l, 0) end)
~~~

J’obtiens : 

~~~bash
[
	"Une ligne",
	"Une autre ligne",
	"",
	"Une ligne"
]
~~~

<strike>Je vais éliminer les lignes vides qui ne servent à rien pour mon travail. J’utilise :</strike>

~~~elixir
|> Enum.reject(&(&1 == "")
~~~

<strike>J’utilise une *fonction anonyme* (`&( ... )`) en utilisant comme premier paramètre (`&1`) chaque élément de la liste. Je le rejette (`reject`) s’il est vide.</strike>

Non, il faut garder les lignes vides qui permettent de reconnaitre les paragraphes.

Mon code est donc :

~~~elixir
Regex.scan(~r/^(.*)$/m, html)
|> Enum.map(fn l -> Enum.fetch!(l, 0) end)
~~~

Dans cette liste, je vais devoir m’intéresser uniquement aux lignes qui commencent par des sélecteurs CSS (en point ou dièse). Après tâtonnement, j’obtiens l’expression régulière suivante :

~~~elixir
@reg_css_class_and_id ~r/\A(\h*)((?:[a-z0-9_\-]+[.\#])+)(?:\h*)(.*)\z/
~~~

Elle signifie :

~~~bash
\A 				On doit commencer en début de chaine
(					Premier groupe (#1) qu'on capture
	\h* 		je prends tous les espaces (tabulations) qui 
					peuvent se trouver en début de ligne.
)
(					mon deuxième groupe capturé (#2)
	(?:			je ne prends pas ce sous-groupe
		[a-z0-9_-]+ 	n'importe quelle lettre minuscule, ou 
									chiffre ou trait plat ou tiret
		[.\#] 				… qui se termine par un point ou un
									dièse.
	)+ 			autant de fois qu'on peut le trouver
(?: 			Un nouveau groupe qu'on ne capture pas
	\h* 		… constitué des espaces qu'on peut trouver 
					avant le paragraphe
)
(.*) 			Groupe (#3) qu'on capture du texte restant, 
					c'est-à-dire le texte du paragraphe.
\z 				On doit finir en fin de chaine.
~~~

Je ne vais donc traiter que les lignes qui répondent à ce masque. J’aurais aimé utiliser la fonction `String.replace/4` mais à l’heure où j’écris ces lignes, elle fonctionne mal avec une fonction pour le remplacement (elle ne sait prendre que l’ensemble du match). Donc je dois fonctionner avec `Regex.replace/4` :

~~~elixir
|> Enum.map(fn line ->
	case line do
		"" -> line
		_ ->	Regex.replace(
			@reg_css_class_and_id, line, fn ... end)
	end
end)
~~~

La fonction va recevoir en argument la masque total puis les groupes :

~~~elixir
Regex.replace(regexp, line, fn _tout, _ld, idcss, parag ->

end
~~~

Je vais d’abord traiter `idcss` pour récupérer les classes CSS :

~~~elixir
@reg_mark_css ~r/([a-z0-9_\-]+)\./
css = Regex.scan(@reg_mark_css, idcss) 
	|> Enum.map(&Enum.at(&1, 1))
~~~

La première ligne : 

~~~elixir
Regex.scan(@reg_mark_css, idcss)
# => [liste des listes de match]
~~~

… récupère la liste des classes, mais sous forme de liste avec toujours un premier élément contenant le match complet, puis le premier groupe, etc. Donc on doit ensuite passer en revue chaque élément `Enum.map` et récupérer le deuxième élément de la liste (donc le premier groupe) avec `Enum.at(&1, 1)`. Noter que la méthode, dans  `Enum.map` est passé par référence (l’esperluette « & » devant) ce qui signifie qu’on va appliquer cette méthode à chaque élément de la liste, dont on récupère le 1er élément (`&1`), par exemple `["maclasse.", "maclasse"]` pour en prendre ensuite l’élément d’index 1, donc le deuxième : `"maclasse"`.

On peut alors construire la marque pour faire le `class="style1 style2 ..."`. Elle n’existera que si des styles ont été définis. Donc :

~~~elixir
mark_class = Enum.any?(css) \
							&& " class=\"#{Enum.join(css, " ")}\"" \
							|| ""
~~~

J’aime bien cette tournure qui équivaut en brièveté à `condition ? si ok : si not ok`. Ici, ça devient

~~~elixir
condition && si ok || si not ok
~~~

Si la `condition` est vrai (ici `Enum.any?(css)` c’est-à-dire « il y a des classes css ») alors on fait `si ok` (ici, on construit le `class="..."`) et sinon (s’il n’y a rien dans la liste alors on fait `si not ok` (ici, on retourne un string vide — une chaine de caractère vide).

Et l’on peut faire la même chose avec l’identifiant (on considère ici qu’il peut y en avoir plusieurs, mais bon, ça n’est pas une bonne pratique.

~~~elixir
@reg_mark_id ~r/([a-z0-9_\-]+)\#/

ids = Regex.scan(@reg_mark_id, idcss) 
|> Enum.map(&Enum.at(&1, 1))
mark_id  = Enum.any?(ids) && " id=\"#{ids}\"" || ""

~~~

Et je peux, à partir de ça, construire mon paragraphe complet : 

~~~elixir
"<p#{mark_id}#{mark_css}>#{parag}</p>"
~~~

… code qui sera renvoyé en remplacement dans `Regex.replace`.

Le code complet de la fonction sera donc :

~~~elixir
@reg_css_class_and_id ~r/\A(\h*)((?:[a-z0-9_\-]+[.#])+)(?:\h*)(.*)\z/
@reg_mark_css ~r/([a-z0-9_\-]+)\./
@reg_mark_id ~r/([a-z0-9_\-]+)\#/
defp class_et_id_css_transformations(html, _options) do
  Regex.scan(~r/^(.*)$/m, html)
  |> Enum.map(fn l -> Enum.fetch!(l, 0) end)
  |> Enum.reject(&(&1 == ""))
  |> Enum.map(fn line ->
      Regex.replace(
      	@reg_css_class_and_id, 
      	line, 
      	fn _, _amorce, idcss, parag ->
        	css = Regex.scan(@reg_mark_css, idcss) 
        	|> Enum.map(&Enum.at(&1, 1))
	        mark_css = Enum.any?(css) \
 					&& " class=\"#{Enum.join(css, " ")}\"" || ""
	        ids = Regex.scan(@reg_mark_id, idcss) 
	        |> Enum.map(&Enum.at(&1, 1))
	        mark_id  = Enum.any?(ids) \
 					&& " id=\"#{ids}\"" || ""
	        "<p#{mark_id}#{mark_css}>#{parag}</p>"
  	    end
  	   )
    end)
end
~~~

Et voilà, `pp_markdown` traite maintenant les lignes de type `classcss.Mon paragraphe trop stylé ! ».





load(_pied_de_page)